import { useContext, createContext } from 'react'
import { defaultValues } from './defaultDetails.js'
import { ControlSection } from '../../ControlSection/ControlSection.jsx'
import { Input } from '../../Input/Input.jsx'

const fallbackLabel = 'Empty :('
const checkInvalidLabel = (l) => !l.split(' ').find((s) => s !== '')

function CareerObjectives({ details, updateDetails }) {
  const listItems = details.careerObjectives
  const bemClassName = 'career-objective'
  const stateName = 'careerObjectives'
  const headingName = 'Career Objective'
  const updateFn = updateDetails
  const getLabel = ({ data }) =>
    checkInvalidLabel(data) ? fallbackLabel : `${data.slice(0, 30)}...`

  const inputs = (
    <>
      <textarea
        className={`dialog--${bemClassName}__textarea`}
        name={bemClassName}
        rows="5"
        cols="33"
        onChange={(e) => {
          const dialog = document.querySelector(`.dialog--${bemClassName}`)
          const listId = dialog.getAttribute('data-id')
          const updatedData = {
            [stateName]: listItems.map((data) => {
              if (listId !== data.id.toString()) return data
              return Object.assign({}, data, { data: e.target.value })
            }),
          }
          updateFn(updatedData)
        }}
      />
    </>
  )

  return (
    <ControlSection
      {...{
        listItems,
        bemClassName,
        stateName,
        headingName,
        updateFn,
        inputs,
        getLabel,
        defaultValues,
      }}
    />
  )
}
function CoreQualifications({ details, updateDetails }) {
  const listItems = details.coreQualifications
  const bemClassName = 'core-qualifications'
  const stateName = 'coreQualifications'
  const headingName = 'Core Qualification'
  const updateFn = updateDetails
  const getLabel = ({ data }) => {
    return checkInvalidLabel(data)
      ? fallbackLabel
      : `${data.slice(0, 30)}${data.length > 30 ? '...' : ''}`
  }
  const inputs = (
    <>
      <input
        type="text"
        onChange={(e) => {
          const dialog = document.querySelector(`.dialog--${bemClassName}`)
          const id = dialog.getAttribute('data-id')
          const updatedData = listItems.map((data) =>
            data.id.toString() !== id
              ? data
              : Object.assign({}, data, { data: e.target.value })
          )

          updateFn({ [stateName]: updatedData })
        }}
      />
    </>
  )

  return (
    <ControlSection
      {...{
        listItems,
        bemClassName,
        stateName,
        headingName,
        updateFn,
        inputs,
        getLabel,
        defaultValues,
      }}
    />
  )
}

function EdInputs({ bemClassName, listItems, updateFn, stateName }) {
  const dialog = document.querySelector(`.dialog--${bemClassName}`)

  const activeEducation =
    dialog === null ||
    dialog.getAttribute('data-id') === null ||
    listItems.length === 0
      ? null
      : listItems.find(
          (ed) => ed.id.toString() === dialog.getAttribute('data-id').toString()
        )

  const extras = activeEducation ? activeEducation.extras : null
  const relevantCourseWork = activeEducation
    ? activeEducation.relevantCourseWork
    : null

  function changeFn(e) {
    const id = document
      .querySelector(`.dialog--${bemClassName}`)
      .getAttribute('data-id')

    const updatedData = listItems.map((ed) => {
      if (ed.id.toString() !== id.toString()) return ed
      return Object.assign({}, ed, {
        [this.state]: this.getValue ? this.getValue(e) : e.target.value,
      })
    })
    updateFn({ [stateName]: updatedData })
  }

  function addFn() {
    const { updateFn, defaultValues } = this

    const nestedFormData = this.listItems.slice()
    const newData =
      this.listItems.length === 0
        ? defaultValues[this.stateName][0]
        : Object.assign({}, defaultValues[this.stateName][0], {
            id: this.listItems[this.listItems.length - 1].id + 1,
          })

    nestedFormData.push(newData)

    const updatedParentData = listItems.slice().map((ed) => {
      if (ed.id.toString() !== activeEducation.id.toString()) return ed

      return Object.assign({}, ed, { [this.stateName]: nestedFormData })
    })

    updateFn({ [stateName]: updatedParentData })
  }

  function checkboxFn(e) {
    const updatedData = this.listItems.map((dataItem) =>
      dataItem.id === this.id
        ? Object.assign({}, dataItem, {
            isVisible: e.target.checked,
          })
        : dataItem
    )

    const updatedParent = listItems.map((ed) => {
      if (ed.id !== activeEducation.id) return ed
      return Object.assign({}, ed, { [this.stateName]: updatedData })
    })

    console.log('checkbox', updatedData)
    this.updateFn({ [stateName]: updatedParent })
  }

  const extrasInputs = (
    <input type="text" name="extras_heading" />
    <input type="text" name="extras_optional" />
  )

  return (
    <>
      <label className="label-hoz">
        Date
        <input
          type="date"
          name="degree start or end date"
          className="input--date"
          onChange={changeFn.bind({ state: 'date' })}
        />
      </label>
      <Input
        placeholder="Degree"
        label="Degree"
        name="degree"
        onChange={changeFn.bind({ state: 'degree' })}
      />
      <Input
        placeholder="Subject"
        label="Subject"
        name="subject"
        onChange={changeFn.bind({ state: 'subject' })}
      />
      <Input
        placeholder="Address"
        label="Address"
        name="address"
        onChange={changeFn.bind({ state: 'address' })}
      />
      <Input
        type="number"
        placeholder="GPA"
        label="GPA"
        name="GPA"
        extras={{
          step: 0.1,
          max: 10,
          min: 1,
        }}
        onChange={changeFn.bind({ state: 'gpa' })}
      />
      {extras && (
        <ControlSection
          checkboxFn={checkboxFn}
          addFn={addFn}
          listItems={extras}
          stateName="extras"
          headingName="Extras"
          bemClassName="extras"
          updateFn={updateFn}
          getLabel={({ bold }) =>
            checkInvalidLabel(bold) ? fallbackLabel : bold
          }
          inputs=<h1>nein</h1>
          sectionType="section--nested"
          defaultValues={defaultValues.education}
        />
      )}
      {relevantCourseWork && (
        <ControlSection
          checkboxFn={checkboxFn}
          addFn={addFn}
          listItems={relevantCourseWork}
          stateName="relevantCourseWork"
          headingName="Relevant Course Work"
          bemClassName="relevant-course-work"
          updateFn={updateFn}
          getLabel={({ data }) =>
            checkInvalidLabel(data) ? fallbackLabel : data
          }
          inputs=<h1>ja</h1>
          sectionType="section--nested"
          defaultValues={defaultValues.education}
          nestedParentId={dialog.getAttribute('data-id')}
        />
      )}
    </>
  )
}

function Education({ updateDetails, details }) {
  const listItems = details.education
  const bemClassName = 'education'
  const stateName = 'education'
  const headingName = 'Education'
  const updateFn = updateDetails
  const getLabel = ({ degree }) =>
    checkInvalidLabel(degree)
      ? fallbackLabel
      : `${degree.slice(0, 30)}${degree.length > 30 ? '...' : ''}`

  function addFn() {
    const updatedData = listItems.slice()
    updatedData.push(
      Object.assign({}, defaultValues[stateName], {
        id: listItems.length === 0 ? 1 : listItems[listItems.length - 1].id + 1,
      })
    )

    updateFn({ education: updatedData })
  }

  return (
    <ControlSection
      {...{
        listItems,
        bemClassName,
        stateName,
        headingName,
        updateFn,
        Inputs: EdInputs,
        getLabel,
        addFn,
      }}
    />
  )
}

export default { CareerObjectives, CoreQualifications, Education }
