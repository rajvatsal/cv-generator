@use 'sass:list' as l;

$gap--horizontal: 10px;
$gap--vertical: $gap--horizontal;

@mixin grid() {
  @supports (grid-area: auto) {
    display: grid;
    grid-column-gap: $gap--horizontal;
    grid-row-gap: $gap--vertical;
  }
}

@mixin gridAuto($min-width) {
  grid-template: 1fr / repeat(auto-fit, minmax($min-width, 1fr));
}

@mixin gridLayout($grid-columns, $cols...) {
  $i: 1;
  @each $col in $cols {
    > :nth-of-type(#{$i}) {
      width: calc(#{round-width(l.nth($col, 1))} - #{$gap-horizontal});
    }
    $i: $i + 1;
  }
  @supports (grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-end: span l.nth($col, 1);
        @if l.length($col) > 1 {
          grid-row-end: span l.nth($col, 2);
        }
      }
      $i: $i + 1;
    }
  }
}

@mixin gridAdvanced($grid-columns, $cols...) {
  > :nth-of-type(#{$i}) {
    @if l.nth($col, 2) == -1 {
      $span: $grid-columns - l.nth($col, 2) - l.nth($col, 1);
    } @else {
      $span: l.nth($col, 2) - l.nth($col, 1);
    }
    width: calc(
      #{$span}* ((100% - #{$gap-horizontal}*#{$grid-columns}) /#{$grid-columns}) +
        (#{l.nth($col, 1)} - 1) *#{$gap-horizontal} - 1px
    );
    min-width: 0;
  }
  $i: $i + 1;

  @supports (grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-start: l.nth($col, 1);
        grid-column-end: l.nth($col, 2);
        grid-row-start: l.nth($col, 3);
        grid-row-end: l.nth($col, 4);
      }
    }
    $i: $i + 1;
  }
}
